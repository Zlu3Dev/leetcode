/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
        //LCA approach
     public int findDistance(TreeNode root, int p, int q) {
        if (p == q)
            return 0;
        TreeNode lca = LCA(root, p, q);
        return dist(p, lca, 0) + dist(q, lca, 0);
    }
    private int dist(int target, TreeNode node, int travel) {
        if (node == null)
            return -1;
        if (target == node.val)
            return travel;
        int travelLeft = dist(target, node.left, travel + 1);
        if (travelLeft == -1)
            return dist(target, node.right, travel + 1);
        return travelLeft;
        
    }
    private TreeNode LCA(TreeNode root, int p, int q) {
        if (root == null)
            return null;
        if (root.val == p || root.val == q)
            return root;
        TreeNode left = LCA(root.left, p, q);
        TreeNode right = LCA(root.right, p, q);
        if (left != null && right != null)
            return root;
        if (left != null)
            return left;
        if (right != null)
            return right;
        return null;
    }
    
}
