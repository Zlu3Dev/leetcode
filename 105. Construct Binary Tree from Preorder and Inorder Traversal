/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {

    public TreeNode buildTree(int[] preorder, int[] inorder) {
         HashMap<Integer,Integer> map = new HashMap<>();
         for(int i =0; i < inorder.length;i++){
             map.put(inorder[i],i);
         }
         return helper(0, 0, inorder.length - 1, preorder, inorder,map);
}

public TreeNode helper(int preStart, int inStart, int inEnd, int[] preorder, int[] inorder,HashMap<Integer,Integer> map) {
    if (preStart > preorder.length - 1 || inStart > inEnd) {
        return null;
    }
    TreeNode root = new TreeNode(preorder[preStart]);
    // Index of current root in inorder
    int rootIndex = map.get(preorder[preStart]);//这里的map是存inorder的，这里是个trick需要看清楚。方便我们从preorder到inorder来回转变。
    System.out.println(rootIndex);
     //这里需要过一遍例子： 先找出根节点，然后找左子树，右子树的范围。从大到小的recursion题型。
        //https://www.youtube.com/watch?v=6Xcz08RkRHE
    /*
    preorder: 3,9,20,15,7 ， 3是root
    inorder: 9,3,15,20,7    inorder左边是左子树，右边是右子树
    */
    root.left = helper(preStart + 1, inStart, rootIndex - 1, preorder, inorder,map);
    root.right = helper(preStart + rootIndex - inStart + 1, rootIndex + 1, inEnd, preorder, inorder,map);
    return root;
    }
}
