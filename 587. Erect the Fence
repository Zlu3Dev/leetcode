import java.util.Arrays;
import java.util.HashSet;

class Solution {
    int cross(int[] o, int[] a, int[] b) {  // ccw > 0, cw < 0
        return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]);
    }

    int compare(int[] a, int[] b) {
        int c = a[0] - b[0];
        return c != 0 ? c : a[1] - b[1];
    }

    public int[][] outerTrees(int[][] trees) {
        HashSet<int[]> ans = new HashSet<>();
        Arrays.sort(trees, this::compare);
        for (int n = 0; n < 2; n++) {
            int[][] stack = new int[trees.length][];
            int len = 0;
            for (int[] tree : trees) {
                stack[len++] = tree;
                while (len >= 3) {
                    int[] b = stack[len - 3];
                    int[] a = stack[len - 2];
                    int[] o = stack[len - 1];
                    if (cross(o, a, b) < 0) {  // remove middle
                        stack[len - 2] = stack[len - 1];
                        len--;
                    } else {
                        break;
                    }
                }
            }
            for (int i = 0; i < len; i++) {
                ans.add(stack[i]);
            }
            for (int i = 0; i < trees.length / 2; i++) { // reverse array
                int[] temp = trees[i];
                trees[i] = trees[trees.length - i - 1];
                trees[trees.length - i - 1] = temp;
            }
        }

        return ans.toArray(new int[0][]);
    }
}
