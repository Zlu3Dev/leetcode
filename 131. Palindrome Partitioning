class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> lists = new ArrayList<>();
        partition(s, lists, new ArrayList<>());
        return lists;
    }
    
    private void partition(String str, List<List<String>> lists, List<String> list) {
        if (str.isEmpty()) {
            lists.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < str.length(); i++) {
            String sub = str.substring(0, i + 1);
            if (isPalindrome(sub)) {
                list.add(sub);
                partition(str.substring(i + 1), lists, list);
                list.remove(list.size() - 1);
            }
        }
    }
    
    private boolean isPalindrome(String str) {
        int lo = 0, hi = str.length() - 1;
        while (lo < hi) {
            if (str.charAt(lo) != str.charAt(hi)) return false;
            lo++;
            hi--;
        }
        return true;
    }
}
