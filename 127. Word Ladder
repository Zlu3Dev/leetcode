class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> set = new HashSet<>();
        for (String s : wordList) {
            set.add(s);
        }
        if (!set.contains(endWord)) return 0;
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        
        int step = 1;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String s = queue.poll();
                char[] arr = s.toCharArray();
                for (int j = 0; j < arr.length; j++) {
                    char original = arr[j];
                    for (char c = 'a'; c <= 'z'; c++) {
                        if (c == arr[j]){
                            continue;
                        }
                        arr[j] = c;
                        String test = String.valueOf(arr);
                        if (test.equals(endWord)) {
                            return step + 1;
                        }
                        if (set.contains(test)) {
                            queue.offer(test);
                            set.remove(test);//remove the unecessary Strings.
                        }
                    }
                    arr[j] = original;
                }
            }
            step++;
        }
        return 0;
    }
}    
//     if(wordList == null){
//         return 0;
//         }
//     if(beginWord.equals(endWord)){
//          return 1;
//          }   
    
//        HashSet<String> hash = new HashSet<String>();
//        Queue<String> q = new LinkedList<String>();
//        q.offer(beginWord);
//        hash.add(beginWord);
       
//        int length = 1;
//        while(!q.isEmpty()){
//                  length++;
//            int size = q.size();
//            for(int i = 0; i < size; i++){
//                 String tempWord = q.poll();
//                 for(String nextWord: getNextWord(tempWord, wordList)){
//                         if(hash.contains(nextWord)){
//                             continue;
//                         }
//                         if(nextWord.equals(endWord)){
//                             return length;
//                         }
//                     hash.add(nextWord);
//                     q.offer(nextWord);
//                }
//            }
            
//        }
//         return 0;
//     }
    
//     private String replace(String s, int index, char c){
//         char[] temp = s.toCharArray();
//         temp[index] = c;
//         return new String(temp);
//     }
    
//     private ArrayList<String> getNextWord(String s, List<String> wordList){
//         ArrayList<String> res = new ArrayList<>();
//         for(char c = 'a'; c < 'z'; c++){
//             for(int i = 0; i < s.length(); i++){
//                 if(c == s.charAt(i)){
//                     continue;
//                 }
//                 String nextWord = replace(s, i, c);
//                 if(wordList.contains(nextWord)){
//                     res.add(nextWord);
//                 }
//             }
//         }       
//         return res;
//     }
//}
