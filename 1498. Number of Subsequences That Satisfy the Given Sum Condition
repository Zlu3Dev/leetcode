class Solution {
    public int numSubseq(int[] nums, int target) {
        int MOD = (int)Math.pow(10, 9) + 7;
        int len = nums.length;
        
        // Pre-calculate pow(2, i) and store them in an array
        int pow[] = new int[len];
        pow[0] = 1;
        for(int i = 1; i < len; i++) {
            pow[i] = (pow[i - 1] * 2) % MOD;
        }
        
        Arrays.sort(nums);
        
        // Tow pointers
        // Total 2^(right-left) combinations between left and right
        int answer = 0;
        int left = 0;
        int right = len - 1;
        while(left <= right){
            if(nums[left] + nums[right] <= target) {
                answer = (answer + pow[right-left]) % MOD;
                left++;
            }
            else {
                right--;
            }
        }
        return answer;
    }
}
