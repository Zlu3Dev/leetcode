class Solution {
    class Node {
         Node parent;
        public Node () {
            this.parent = this;
        }
    }

    public int regionsBySlashes(String[] grid) {
        Node[][] graph = new Node[grid.length+1][grid.length+1];
        for(int i=0; i<graph.length; i++){
            for(int j=0; j<graph[i].length; j++) {
                graph[i][j] = new Node();
            }
        }

        for(int i=0; i<graph[0].length; i++) {
            graph[0][i].parent = graph[0][0];
            graph[i][0].parent = graph[0][0];
            graph[i][graph.length-1].parent = graph[0][0];
            graph[graph.length-1][i].parent = graph[0][0];
        }
        int ans =1;
        for(int i=0; i<grid.length;i++) {
            for(int j=0; j<grid.length;j++) {
                char symbol = grid[i].charAt(j);
                if (symbol == '/') {
                    var parA = find(graph[i+1][j]);
                    var parB = find(graph[i][j+1]);
                    if (parA == parB)
                        ans++;
                    else {
                        parA.parent = parB;
                    }
                } else if (symbol == '\\') {
                    var parA = find(graph[i][j]);
                    var parB = find(graph[i+1][j+1]);
                    if (parA == parB)
                        ans++;
                    else {
                        parA.parent = parB;
                    }
                }
            }
        }
        return ans;
    }

    Node find(Node node) {
         Node parent = node.parent;
         if (parent != node)
             parent = find(parent);
         node.parent = parent;// parent path compression
        return parent;
    }
}
