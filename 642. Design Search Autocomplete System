class AutocompleteSystem {
    
    class TrieNode implements Comparable<TrieNode>{
        String word;
        int times;
        List<TrieNode> hotNodes;
        TrieNode[] adjNodes;
        TrieNode(){
            times = 0;
            hotNodes = new ArrayList<>();
            adjNodes = new TrieNode[128];
        }
        @Override()
        public int compareTo(TrieNode t) {
            if(t.times!=this.times) {
                return t.times - this.times;
            }
            return this.word.compareTo(t.word);
        }
        
        public void update(TrieNode t) {
            if(!this.hotNodes.contains(t)) {
                hotNodes.add(t);
            }
            Collections.sort(hotNodes);
            if(hotNodes.size() > 3) {
                hotNodes.remove(hotNodes.size()-1);
            }
        }
    }
    
    TrieNode root;
    TrieNode curr;
    StringBuilder sb;
    
    public void add(String sentence, int times) {
        TrieNode np = root;
        List<TrieNode> temp = new ArrayList<>();
        for(char c : sentence.toCharArray()) {
            if(np.adjNodes[c] == null) {
                np.adjNodes[c] = new TrieNode();
            }
            np = np.adjNodes[c];
            temp.add(np);
        }
        np.times += times;
        np.word = sentence;
        for(TrieNode t : temp) {
            t.update(np);
        }
    }
    public AutocompleteSystem(String[] sentences, int[] times) {
        root = new TrieNode();
        curr = root;
        sb = new StringBuilder();
        for(int i=0;i<times.length;i++) {
            add(sentences[i], times[i]);
         }
    }
    
    public List<String> input(char c) {
        List<String> res = new ArrayList<>();
        if(c == '#') {
            add(sb.toString(), 1);
            curr = root;
            sb.setLength(0);
            return res;
        }
        sb.append(c);
        
        
        if(curr == null) 
            return res;
        curr = curr.adjNodes[c];
        if(curr == null) 
            return res;
        // if(curr == null || curr.adjNodes[c] == null) {
        //     return res;
        // }
       // curr = curr.adjNodes[c];
        for(TrieNode t : curr.hotNodes) {
            res.add(t.word);
        } 
        return res;
    }
}

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * List<String> param_1 = obj.input(c);
 */
