   public class Solution {
       //DFS 另外一种类型 - backtracking
    	 public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<>();
        if (digits == null || digits.length() == 0) {
            return res;
        }
        char[][] map = new char[10][0];
        map[2] = new char[] {'a', 'b', 'c'};
        map[3] = new char[] {'d', 'e', 'f'};
        map[4] = new char[] {'g', 'h', 'i'};
        map[5] = new char[] {'j', 'k', 'l'};
        map[6] = new char[] {'m', 'n', 'o'};
        map[7] = new char[] {'p', 'q', 'r', 's'};
        map[8] = new char[] {'t', 'u', 'v'};
        map[9] = new char[] {'w', 'x', 'y', 'z'};
        StringBuilder sb = new StringBuilder();
        letterCombinations(res, sb, map, digits, 0);
        return res;
    }
    
    private void letterCombinations(List<String> res, StringBuilder sb, char[][] map, String digits, int pos) {
        if (pos == digits.length()) {
            res.add(sb.toString());
            return;
        }
        int num = digits.charAt(pos) - '0';
        for (int j = 0; j < map[num].length; j++) {
            sb.append(map[num][j]);
            letterCombinations(res, sb, map, digits, pos + 1);
            sb.setLength(sb.length() - 1);
        }
    }
}
