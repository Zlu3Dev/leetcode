class Solution {
    //DFS
    int min = Integer.MAX_VALUE;
    
    public int assignBikes(int[][] workers, int[][] bikes) {
        dfs(workers, 0, bikes, new boolean[bikes.length], 0);
        return min;
    }
	

    private void dfs(int[][] workers, int i, int[][] bikes, boolean[] used, int sum) {
        if (i == workers.length) {
            min = Math.min(min, sum);
            return;
        }
        
        if (sum > min) return;  // early termination
        
        for (int j = 0; j < bikes.length; ++j) {
            if (used[j]) continue;
            used[j] = true;
            dfs(workers, i+1, bikes, used, sum + getDistance(workers[i], bikes[j]));
            used[j] = false;
        }
    }
    
    int getDistance(int[] worker, int[] bike) {
        return Math.abs(worker[0] - bike[0]) + Math.abs(worker[1] - bike[1]);
    }
}

/*
class Solution {
    public int assignBikes(int[][] workers, int[][] bikes) {
        PriorityQueue<Dist> pq = new PriorityQueue<>((a, b) -> a.dist - b.dist);
        HashSet<String> hasSeen = new HashSet<>(); // till the n-th worker with bike-code;
        pq.offer(new Dist(-1, 0, 0, new int[]{0, 0}, new int[]{0, 0}));
        while (!pq.isEmpty()) {
            Dist currdist = pq.poll();
            
            // System.out.println(currdist.worker + " " + currdist.bikecode + " " + currdist.dist);
            if (currdist.worker == workers.length - 1) return currdist.dist;
            if (hasSeen.contains("$" + currdist.worker + "$" + currdist.bikecode)) 
                continue;
            else
                hasSeen.add("$" + currdist.worker + "$" + currdist.bikecode);
            
            for (int bike = 0; bike < bikes.length; bike++) {
                if ((currdist.bikecode & (1 << bike)) == 0) {
                    Dist nextdist = new Dist(currdist.worker + 1, currdist.bikecode | (1 << bike), currdist.dist, workers[currdist.worker + 1], bikes[bike]);
                    pq.offer(nextdist);
                }
            }
        }
        return -1;
    }
    
    private class Dist {
        int worker;
        int bikecode;
        int dist;
        
        Dist(int worker, int bikecode, int prevdist, int[] workerPosition, int[] bikePosition) {
            this.worker = worker;
            this.bikecode = bikecode;
            dist = prevdist + Math.abs(workerPosition[0] - bikePosition[0]) + Math.abs(workerPosition[1] - bikePosition[1]);
        }
    }
}


*/
