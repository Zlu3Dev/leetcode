class NumMatrix {
  /*
  第一种方法Binary index tree 考点.需要多写一个prefix sum函数。
   log(m) * log(n)
  */

 
    int[][] tree;
    int[][] nums;
    int m,n;
    public NumMatrix(int[][] matrix) {
        if(matrix.length == 0 || matrix[0].length == 0){
            return;
        }
        m = matrix.length;
        n = matrix[0].length;
        tree = new int[m + 1][n + 1];
        nums = new int[m][n];
        for(int r = 0; r < m; r++){
            for(int c = 0; c < n; c++){
                update(r,c,matrix[r][c]);
            }
        }
    }
    
    public void update(int row, int col, int val) {
        if(m == 0 || n == 0){
            return;
        }
        int diff = val - nums[row][col];
        nums[row][col] = val;
        for(int r = row + 1; r <= m; r += r &(-r)){// return rightmost 1 bit in n
            for(int c = col + 1; c <= n; c += c & (-c)){
                tree[r][c] += diff;
            }
        }
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        if(m == 0 || n == 0){
            return 0;
        }
        return sum(row2 + 1, col2 + 1) + sum(row1, col1) - sum(row1,col2+1) - sum(row2 + 1,col1);
    }
    
    private int sum(int row, int col){//prefix sum 模板
        int sum = 0;
        for(int i = row; i > 0; i -= i & (-i)){
            for(int j = col; j > 0; j -= j & (-j)){
                sum += tree[i][j];
            }
        }
        return sum;
    }
     
    /*  第二种：DP
    private int m;
    private int n;
    private int[][] mem;
    private int[][] matrix;

    public NumMatrix(int[][] matrix) {
        m = matrix.length;
        if (m > 0) n = matrix[0].length;
        if (m > 0 && n > 0) {
            this.matrix = matrix;
            mem = new int[m][n];
            for (int i = 0; i < m; i++)
                for (int j = 0; j < n; j++) {
                    mem[i][j] = i == 0 ? 
                        matrix[0][j] : matrix[i][j] + mem[i-1][j];
                }
        }
    }
    
    public void update(int row, int col, int val) {
        int d = val - matrix[row][col];
        matrix[row][col] = val;
        for (int i = row; i < m; i++) mem[i][col] = mem[i][col] + d;
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int sum = 0;
        for (int i = col1; i <= col2; i++) sum += sumCol(row1, row2, i);
        return sum;
    }
    
    private int sumCol(int row1, int row2, int col) {
        if (row1 == 0) return mem[row2][col];
        else return mem[row2][col] - mem[row1-1][col];
    }
    */
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * obj.update(row,col,val);
 * int param_2 = obj.sumRegion(row1,col1,row2,col2);
 */
