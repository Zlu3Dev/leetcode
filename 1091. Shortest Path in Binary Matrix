class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        if (grid[0][0] == 1) {
            return -1;
        }
        
        int n = grid.length;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[] {0, 0});
        boolean[][] visited = new boolean[n][n];
        visited[0][0] = true;
        
        int step = 1;
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}};
        int[] p;
        int nx, ny, size;
        
        while (!queue.isEmpty()) {
            size = queue.size();
            
            for (int i = 0; i < size; i++) {
                p = queue.poll();
                
                if (p[0] == n - 1 && p[1] == n - 1) {
                    return step;
                }
            
                for (int[] dir : dirs) {
                    nx = p[0] + dir[0];
                    ny = p[1] + dir[1];
                    
                    if (nx < 0 || nx >= n || ny < 0 || ny >= n || 
                        grid[nx][ny] == 1 || visited[nx][ny]) {
                        continue;
                    }
                    
                    queue.offer(new int[] {nx, ny});
                    visited[nx][ny] = true;
                }                
            }
            
            step++;
        }
        
        return -1;
    }
}

/*
跟别的题目的不同点是可以向八个方向扩展，需要修改方向向量
一开始把（0，0）放到queue当中，向八个方向扩展
如果是没有访问过的0则放到queue当中，继续扩展，直到到达右底部
*/
