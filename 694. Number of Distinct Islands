class Solution {
  /*
  我们可以通过BFS/DFS得到每一个岛屿, 然后把每一个岛屿的形状放到 set 里, 最后 set 的大小就是答案.

那么问题的关键在于如何描述一个岛屿的形状.

有以下两个基本思路:

记录一个岛屿所有点相对于左上角的点的相对位置.
记录一个岛屿的bfs/dfs轨迹
方法1涉及细节较少, 但是可能复杂度相对较高, 不过 50x50 的数据范围不会超时.

方法1也有多种实现方法, 比如一个岛屿形状可以用set记录, 也可以将所有点的相对坐标排序后转换成字符串.

方法2需要注意一个细节: 不能仅仅储存下来dfs/bfs移动的方向, 因为涉及到回溯等问题, 可以加上一定的间隔符, 或者除方向之外额外记录一个位置信息.
  */
        int n = 0, m = 0;
    Set<String> S = new HashSet<>();
    String tmp = "";
    boolean[][] vis = null;
    int ix = 0, iy = 0;
    int[] fx = new int[] { 1, -1, 0, 0 };
    int[] fy = new int[] { 0, 0, 1, -1 };
     public int numDistinctIslands(int[][] grid) {
        n = grid.length;
        m = grid[0].length;
        vis = new boolean[n][m];
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (grid[i][j] == 1 && !vis[i][j]) {
                    tmp = "";
                    ix = i;
                    iy = j;
                    dfs(i, j, grid);
                    S.add(tmp);
                }
            }
        }
        return S.size();
    }

    public void dfs(int x, int y, int grid[][]) {
        vis[x][y] = true;
        tmp += (x - ix) + "" + (y - iy);
        for (int i = 0; i < 4; ++i) {
            int nx = x + fx[i], ny = y + fy[i];
            if (nx < 0 || nx >= n || ny < 0 || ny >= m || vis[nx][ny] || grid[nx][ny] == 0)
                continue;
            dfs(nx, ny, grid);
        }
    }
}
