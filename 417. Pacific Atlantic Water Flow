class Solution {
    /*可以通过bfs来做这题。
    也是从ocean到cell的方式，用两个queue代表pacific和atlantic，把visted过的相同的值加进去就可以了。
    */
    int[][]dir = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
    public List<int[]> pacificAtlantic(int[][] matrix) {
        List<int[]> res = new LinkedList<>();
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return res;
        }
        int n = matrix.length, m = matrix[0].length;
        //One visited map for each ocean
        boolean[][] pacific = new boolean[n][m];
        boolean[][] atlantic = new boolean[n][m];
        Queue<int[]> pQueue = new LinkedList<>();
        Queue<int[]> aQueue = new LinkedList<>();
        for(int i=0; i<n; i++){ //Vertical border
            pQueue.offer(new int[]{i, 0});
            aQueue.offer(new int[]{i, m-1});
            pacific[i][0] = true;
            atlantic[i][m-1] = true;
        }
        for(int i=0; i<m; i++){ //Horizontal border
            pQueue.offer(new int[]{0, i});
            aQueue.offer(new int[]{n-1, i});
            pacific[0][i] = true;
            atlantic[n-1][i] = true;
        }
        bfs(matrix, pQueue, pacific);
        bfs(matrix, aQueue, atlantic);
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(pacific[i][j] && atlantic[i][j])
                    res.add(new int[]{i,j});
            }
        }
        return res;
    }
    public void bfs(int[][]matrix, Queue<int[]> queue, boolean[][]visited){
        int n = matrix.length, m = matrix[0].length;
        while(!queue.isEmpty()){
            int[] cur = queue.poll();
            for(int[] d:dir){
                int x = cur[0]+d[0];
                int y = cur[1]+d[1];
                if(x<0 || x>=n || y<0 || y>=m || visited[x][y] || matrix[x][y] < matrix[cur[0]][cur[1]]){
                    continue;
                }
                visited[x][y] = true;
                queue.offer(new int[]{x, y});
            } 
        }
    }
    
    
    /*可以通过DFS
    DFS的思路不是从中间去找，而是把所有边缘点当作起点开始遍历搜索。然后标记能到达的点为 true，分别标记出 pacific 和 atlantic 能到达的点，那么最终能返回     的点就是二者均为 true 的点
      int m = matrix.length;
        List<int[]> ans = new ArrayList<>();
        if (matrix == null || m == 0) {
            return ans;
        }
        int n = matrix[0].length;
        int[][] direction = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        boolean[][] canReachP = new boolean[m][n];
        boolean[][] canReachA = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            dfs(matrix, i, 0, m ,n, canReachP, direction);
            dfs(matrix, i, n-1, m, n, canReachA, direction);
        }
        for (int i = 0; i < n; i++) {
            dfs(matrix, 0, i, m, n, canReachP, direction);
            dfs(matrix, m-1, i, m, n, canReachA, direction);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (canReachP[i][j] && canReachA[i][j]) {
                    ans.add(new int[]{i, j});
                }
            }
        }
        return ans;
    }
    private void dfs(int[][] matrix, int r, int c, int m, int n, boolean[][] canReach, int[][] direction) {
        if (canReach[r][c]) {
            return;
        }
        canReach[r][c] = true;
        for (int i = 0; i < direction.length; i++) {
            int nextR = direction[i][0] + r;
            int nextC = direction[i][1] + c;
            if (nextR < 0 || nextR >= m || nextC < 0 || nextC >= n
                    || matrix[r][c] > matrix[nextR][nextC]) {
                continue;
            }
            dfs(matrix, nextR, nextC, m, n, canReach, direction);
        }
    }
    */
}
