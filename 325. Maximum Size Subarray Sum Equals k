class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
      /*题目的核心思路是利用presum。
      举个例子nums = [-2, -1, 2, 1], k = 1。  The subarray [-1, 2] sums to 1 and is the longest.这里比较难思考的就是这个例子如何找到这个[-1, 2]的       位置呢？其实可以这么解决。利用一个hashmap然后把所有的presum都算出来，presums: [-2, -3, -1, 0]
                                                            这个presums对应的key：0   1   2  3
                                                        然后我们用 map.containsKey(sum - k)来计算下当k = 1 的时候每个key对应的sum - k值分别为
                                                     i= 0-> -3
                                                        1-> -4
                                                        2-> -2
                                                        3-> -1
                                                    得到对应的值以后我们看这些value是否在原来数组中[-2, -1, 2, 1]出现过。我们发现-1，-2都出现过。
                                                        此时的-2的map.get(sum - k)的key值为0， i = 0，所以 0 - 0 = 0。length是0；
                                                              -1的map.get(sum - k)的key值为1， i = 3，所以 3 - 1 =2. length是2；
                                                              最后取最大值就是2.时间复杂度是O(n),符合题意。当然这个思路很巧妙的利用了一个变量presum边累加边处理，而且我们哈希表也完全不用建立和一维数组的映射，只要保存第一个出现该累积和的位置，后面再出现直接跳过，这样算下来就是最长的子数组
      */
    int presum = 0, max = 0;
    HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
    for (int i = 0; i < nums.length; i++) {
        presum = presum + nums[i];
        if (presum == k){
            max = i + 1;
        }
        else if (map.containsKey(presum - k)){
            max = Math.max(max, i - map.get(presum - k));
        }
        if (!map.containsKey(presum)){
            map.put(presum, i);
        }
     }
        return max;
    }
}
