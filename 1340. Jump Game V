class Solution {
   public int maxJumps(int[] arr, int d) {
        int n = arr.length;
        int dp[] = new int[n];
        for(int i=0; i<n; i++) {
            dp[i] = 0;
        }
        int m = 0;
        for(int i=0; i<n; i++) {
            dp[i] = recursiveCalc(arr, dp, d, n, i);
            m = m > dp[i] ? m : dp[i];
        }
        return m;
    }
    
    public int recursiveCalc(int[] arr, int[] dp, int d, int n, int i) {
        if(dp[i]!=0)  {
            return dp[i];
        }
        int m = 0,p;
        int j = i-1;
        while(j>=0 && j>=i-d && arr[j]<arr[i]) {
            p = recursiveCalc(arr, dp, d, n, j);
            m = m > p ? m : p;
            j--;
        }
        j = i+1;
        while(j<n && j<=i+d && arr[j]<arr[i]) {
            p = recursiveCalc(arr, dp, d, n, j);
            m = m > p ? m : p;
            j++;
        }
        dp[i] = m+1;
        return dp[i];
    }
}
